import customtkinter as ctk
import threading
import time
from imapclient import IMAPClient
import email
from email.header import decode_header
import ssl
from CTkMessagebox import CTkMessagebox
import os
from PIL import Image
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("blue")

class EmailNotifier(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("üìß Email Notifier")
        self.geometry("600x700")
        self.minsize(500, 600)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.host = "mail.evgrp.ru"
        self.username = "tk/ma.andrejchenko"
        self.password = "Road90-Fill5"
        self.email_address = "ma.andrejchenko@stroyenergokom.ru"
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.connected = False
        self.client = None
        self.last_check = None
        self.unread_count = 0
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        
        # ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        self.last_checked_ids = set()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
        self.check_emails()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(self.main_frame, text="üìß Email Notifier", 
                                      font=ctk.CTkFont(size=24, weight="bold"))
        self.title_label.pack(pady=20)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_frame = ctk.CTkFrame(self.main_frame)
        self.status_frame.pack(fill="x", padx=20, pady=10)
        
        self.status_label = ctk.CTkLabel(self.status_frame, text="–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–æ", 
                                       font=ctk.CTkFont(size=14))
        self.status_label.pack(side="left", padx=10)
        
        self.connection_indicator = ctk.CTkLabel(self.status_frame, text="‚óè", 
                                               text_color="red", font=ctk.CTkFont(size=16))
        self.connection_indicator.pack(side="right", padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—á—Ç–µ
        self.info_frame = ctk.CTkFrame(self.main_frame)
        self.info_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(self.info_frame, text="–ü–æ—á—Ç–∞:").grid(row=0, column=0, sticky="w", padx=10, pady=5)
        self.email_label = ctk.CTkLabel(self.info_frame, text=self.email_address, 
                                      font=ctk.CTkFont(weight="bold"))
        self.email_label.grid(row=0, column=1, sticky="w", padx=10, pady=5)
        
        ctk.CTkLabel(self.info_frame, text="–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:").grid(row=1, column=0, sticky="w", padx=10, pady=5)
        self.unread_label = ctk.CTkLabel(self.info_frame, text="0", 
                                       font=ctk.CTkFont(weight="bold"))
        self.unread_label.grid(row=1, column=1, sticky="w", padx=10, pady=5)
        
        ctk.CTkLabel(self.info_frame, text="–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:").grid(row=2, column=0, sticky="w", padx=10, pady=5)
        self.last_check_label = ctk.CTkLabel(self.info_frame, text="–ù–∏–∫–æ–≥–¥–∞", 
                                           font=ctk.CTkFont(weight="bold"))
        self.last_check_label.grid(row=2, column=1, sticky="w", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.buttons_frame = ctk.CTkFrame(self.main_frame)
        self.buttons_frame.pack(fill="x", padx=20, pady=10)
        
        self.check_button = ctk.CTkButton(self.buttons_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", 
                                        command=self.check_emails)
        self.check_button.pack(side="left", padx=5)
        
        self.settings_button = ctk.CTkButton(self.buttons_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                                           command=self.open_settings)
        self.settings_button.pack(side="right", padx=5)
        
        # –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
        self.emails_frame = ctk.CTkFrame(self.main_frame)
        self.emails_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        ctk.CTkLabel(self.emails_frame, text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏—Å—å–º–∞:", 
                   font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø–∏—Å—å–º–∞–º–∏
        self.emails_table = ctk.CTkTextbox(self.emails_frame, height=300)
        self.emails_table.pack(fill="both", expand=True, padx=10, pady=10)
        self.emails_table.configure(state="disabled")
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ctk.CTkLabel(self, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", anchor="w")
        self.status_bar.pack(fill="x", side="bottom", padx=20, pady=5)
    
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ssl_context = ssl.create_default_context()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            self.client = IMAPClient(self.host, ssl_context=ssl_context)
            self.client.login(self.username, self.password)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö
            self.client.select_folder('INBOX')
            
            self.connected = True
            self.update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", "green")
            return True
            
        except Exception as e:
            self.connected = False
            self.update_status(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "red")
            return False
    
    def disconnect_from_server(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.client:
                self.client.logout()
                self.client = None
        except:
            pass
        finally:
            self.connected = False
            self.update_status("–û—Ç–∫–ª—é—á–µ–Ω–æ", "red")
    
    def check_emails(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...", "orange")
        self.check_button.configure(state="disabled")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._check_emails_thread)
        thread.daemon = True
        thread.start()
    
    def _check_emails_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            if not self.connect_to_server():
                return
            
            # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            messages = self.client.search(['UNSEEN'])
            self.unread_count = len(messages)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–∞—Ö
            emails_info = []
            new_emails = []
            
            for msg_id in messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º,ÊòØÊñ∞–æ–µ –ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ
                if msg_id not in self.last_checked_ids:
                    new_emails.append(msg_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
                msg_data = self.client.fetch([msg_id], ['RFC822', 'BODY.PEEK[]'])
                raw_email = msg_data[msg_id][b'RFC822']
                
                # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                email_message = email.message_from_bytes(raw_email)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
                subject, encoding = decode_header(email_message["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding if encoding else "utf-8")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                from_ = email_message.get("From")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
                date = email_message.get("Date")
                
                emails_info.append({
                    'id': msg_id,
                    'subject': subject,
                    'from': from_,
                    'date': date
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ ID
            self.last_checked_ids = set(messages)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.after(0, lambda: self.update_emails_list(emails_info, new_emails))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö
            if new_emails:
                self.after(0, lambda: self.show_new_emails_notification(len(new_emails)))
                
        except Exception as e:
            self.after(0, lambda: self.update_status(f"–û—à–∏–±–∫–∞: {str(e)}", "red"))
        finally:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            self.disconnect_from_server()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            self.after(self.check_interval * 1000, self.check_emails)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.after(0, lambda: self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "white"))
            self.after(0, lambda: self.check_button.configure(state="normal"))
    
    def update_emails_list(self, emails_info, new_emails):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∏—Å–µ–º"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        self.unread_label.configure(text=str(self.unread_count))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.last_check = time.strftime("%H:%M:%S")
        self.last_check_label.configure(text=self.last_check)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
        self.emails_table.configure(state="normal")
        self.emails_table.delete("1.0", "end")
        
        for email_info in emails_info[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∏—Å–µ–º
            is_new = email_info['id'] in new_emails
            new_indicator = "üÜï " if is_new else ""
            
            email_text = f"{new_indicator}–û—Ç: {email_info['from']}\n"
            email_text += f"–¢–µ–º–∞: {email_info['subject']}\n"
            email_text += f"–î–∞—Ç–∞: {email_info['date']}\n"
            email_text += "-" * 50 + "\n"
            
            self.emails_table.insert("end", email_text)
        
        self.emails_table.configure(state="disabled")
    
    def show_new_emails_notification(self, count):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö"""
        CTkMessagebox(title="–ù–æ–≤—ã–µ –ø–∏—Å—å–º–∞", 
                     message=f"–£ –≤–∞—Å {count} –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞(–µ–º)!", 
                     icon="info")
    
    def update_status(self, message, color="white"):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.configure(text=f"–°—Ç–∞—Ç—É—Å: {message}")
        self.connection_indicator.configure(text_color=color)
        self.status_bar.configure(text=message)
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = ctk.CTkToplevel(self)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_window.geometry("400x300")
        settings_window.transient(self)
        settings_window.grab_set()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        ctk.CTkLabel(settings_window, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã):").pack(pady=10)
        interval_var = ctk.StringVar(value=str(self.check_interval))
        interval_entry = ctk.CTkEntry(settings_window, textvariable=interval_var)
        interval_entry.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        def save_settings():
            try:
                new_interval = int(interval_var.get())
                if new_interval < 30:
                    CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥", icon="warning")
                    return
                
                self.check_interval = new_interval
                settings_window.destroy()
                CTkMessagebox(title="–£—Å–ø–µ—Ö", message="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", icon="info")
            except ValueError:
                CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", icon="warning")
        
        ctk.CTkButton(settings_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_settings).pack(pady=20)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.disconnect_from_server()
        self.destroy()

if __name__ == "__main__":
    app = EmailNotifier()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()